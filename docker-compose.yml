version: "2"

services:
    # Core configuration
    debian:
        container_name: ${CONTAINER_NAME}_debian
        build: .
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

    nginx:
        container_name: ${CONTAINER_NAME}_nginx
        image: nginx
        ports:
            - '${NGINX_PORT}:80'
        links:
            - debian
            - selenium_chrome_testing
            - selenium_firefox_testing
        volumes:
            - './:${WORKPATH}:rw'
            - './docker/nginx/conf/core.conf:/etc/nginx/conf/nginx.conf:ro'
            - './docker/nginx/conf/development:/etc/nginx/conf.d:ro'
            # - './docker/nginx/conf/production:/etc/nginx/conf.d:ro' -> Uncomment this line for production.
            - './docker/nginx/logs/:/var/log/nginx'
        restart: always

    php-fpm:
        container_name: ${CONTAINER_NAME}_php-fpm
        build: './docker/php'
        environment:
          BLACKFIRE_SERVER_ID: '${BLACKFIRE_SERVER_ID}'
          BLACKFIRE_SERVER_TOKEN: '${BLACKFIRE_SERVER_TOKEN}'
        ports:
            - '${PHP_PORT}:9000'
        links:
            - debian
            - selenium_chrome_testing
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

    # Frontend configuration
    node:
        container_name: ${CONTAINER_NAME}_nodejs
        build: './docker/node'
        links:
            - debian
        volumes:
            - './:${WORKPATH}:rw'
        working_dir: ${WORKPATH}
        command: bash -c "yarn && yarn watch"
        # command: bash -c "yarn && yarn build" -> Uncomment for production.
        restart: always

    # Server optimization
    varnish:
        container_name: ${CONTAINER_NAME}_varnish
        build: './docker/varnish'
        links:
            - debian
        volumes:
            - './:${WORKPATH}:rw'
            - './docker/varnish/conf:/etc/varnish:ro'
        ports:
            - '${VARNISH_PORT}:80'
        restart: always

    redis:
        container_name: ${CONTAINER_NAME}_redis
        image: redis
        ports:
            - '${REDIS_PORT}:6379'
        links:
            - debian
        restart: always

    # DB configuration
    postgresql:
        container_name: ${CONTAINER_NAME}_postgresql
        image: postgres:9.6 # Update to 10.0 once Doctrine is updated.
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - 'postgres_cyclepath:/var/lib/postgresql/data:rw'
        restart: always

    # Performances configuration
    blackfire:
        container_name: ${CONTAINER_NAME}_blackfire
        image: blackfire/blackfire
        environment:
            BLACKFIRE_SERVER_ID: '${BLACKFIRE_SERVER_ID}'
            BLACKFIRE_SERVER_TOKEN: '${BLACKFIRE_SERVER_TOKEN}'
        links:
            - php-fpm
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

    # Testing configuration
    selenium_hub:
        container_name: ${CONTAINER_NAME}_selenium_hub
        image: selenium/hub
        ports:
            - '${SELENIUM_PORT}:4444'
        restart: always

    selenium_chrome_testing:
        container_name: ${CONTAINER_NAME}_selenium_chrome
        image: selenium/node-chrome-debug
        ports:
            - '${SELENIUM_CHROME_PORT}:5900'
        environment:
            HUB_PORT_4444_TCP_ADDR: selenium_hub
            HUB_PORT_4444_TCP_PORT: ${SELENIUM_PORT}
        depends_on:
            - selenium_hub
        links:
            - selenium_hub:hub
        restart: always

    selenium_firefox_testing:
        container_name: ${CONTAINER_NAME}_selenium_firefox
        image: selenium/node-firefox-debug
        ports:
            - '${SELENIUM_FIREFOX_PORT}:5900'
        environment:
            HUB_PORT_4444_TCP_ADDR: selenium_hub
            HUB_PORT_4444_TCP_PORT: ${SELENIUM_PORT}
        depends_on:
            - selenium_hub
        links:
            - selenium_hub:hub
        restart: always

volumes:
    postgres_cyclepath:
